/*******************************************************************************
  * File Name          : LPH8731-3C.h
  * Description        : LCD driver (Siemens M60, C60, MC60, S55)
  *****************************************************************************/

#ifndef	__LPH87313C_h
#define	__LPH87313C_h

/* Includes ------------------------------------------------------------------*/

#define CORTEX_M	0 											//0 для Cortex-M0, 3 для Cortex-M3 и 4 для Cortex-M4 – выбираем тип нашего микроконтроллера
#define GPIOSPEED	GPIO_Speed_10MHz 				

#define SYSCLK	48 												// Необходимо для работы функций delay_us() и delay_ms() - это значение можно найти в файле system_stm32fxxx.c
#define _8_BIT_COLOR  									//Если закомментировано - 12-ти битный цвет
#define _GEOMETRICAL  										//Использование функций вывода геометрических фигур

//========================================================================
// Назначение выводов порта – Здесь выбираем порт и к каким конкретно выводам наш дисплей будет подключён
//========================================================================
#define LCD_PORT 								GPIOD
#define LCD_PORT_RCC						RCC_APB2Periph_GPIOD

#define LCD_CS      GPIO_Pin_10						//Выбор чипа
#define LCD_RESET   GPIO_Pin_11  					//Сброс
#define LCD_RS      GPIO_Pin_12  					//CD - тип передаваемых данных
#define LCD_CLK     GPIO_Pin_13  					//Синхронизация
#define LCD_DATA    GPIO_Pin_14   				//Данные

#define LCD_CS_LO()					(GPIO_ResetBits(LCD_PORT, LCD_CS))								//(HAL_GPIO_WritePin(LCD_PORT, LCD_CS, GPIO_PIN_RESET))
#define LCD_CS_HI()					(GPIO_SetBits(LCD_PORT, LCD_CS))									//(HAL_GPIO_WritePin(LCD_PORT, LCD_CS, GPIO_PIN_SET))
#define LCD_RESET_LO()			(GPIO_ResetBits(LCD_PORT, LCD_RESET))							//(HAL_GPIO_WritePin(LCD_PORT, LCD_RESET, GPIO_PIN_RESET))
#define LCD_RESET_HI()			(GPIO_SetBits(LCD_PORT, LCD_RESET))								//(HAL_GPIO_WritePin(LCD_PORT, LCD_RESET, GPIO_PIN_SET))
#define LCD_RS_LO()					(GPIO_ResetBits(LCD_PORT, LCD_RS))								//(HAL_GPIO_WritePin(LCD_PORT, LCD_RS, GPIO_PIN_RESET))
#define LCD_RS_HI()					(GPIO_SetBits(LCD_PORT, LCD_RS))									//(HAL_GPIO_WritePin(LCD_PORT, LCD_RS, GPIO_PIN_SET))
#define LCD_CLK_LO()				(GPIO_ResetBits(LCD_PORT, LCD_CLK))								//(HAL_GPIO_WritePin(LCD_PORT, LCD_CLK, GPIO_PIN_RESET))
#define LCD_CLK_HI()				(GPIO_SetBits(LCD_PORT, LCD_CLK))									//(HAL_GPIO_WritePin(LCD_PORT, LCD_CLK, GPIO_PIN_SET))
#define LCD_DATA_LO()				(GPIO_ResetBits(LCD_PORT, LCD_DATA))							//(HAL_GPIO_WritePin(LCD_PORT, LCD_DATA, GPIO_PIN_RESET))
#define LCD_DATA_HI()				(GPIO_SetBits(LCD_PORT, LCD_DATA))								//(HAL_GPIO_WritePin(LCD_PORT, LCD_DATA, GPIO_PIN_SET))



//===============================================================
//     			    Определение цветов
//===============================================================
#ifdef _8_BIT_COLOR
//8-ми битовая цветовая палитра (256 цветов)
#define GREEN       0x1C
#define DARK_GREEN  0x15
#define RED         0xE0
#define CYAN        0x1F    
#define DARK_BLUE   0x03
#define YELLOW      0xFC
#define ORANGE      0xEC
#define VIOLET      0xE3
#define WHITE       0xFF
#define BLACK       0x00
#define GREY        0x6D

#else   //_8_BIT_COLOR
//12-ти битовая цветовая палитра (4096 цветов)
#define GREEN       0x0F0
#define DARK_GREEN  0x0B4
#define RED         0xF00
#define CYAN        0x0FF
#define DARK_BLUE   0x00F
#define YELLOW      0xFF0
#define ORANGE      0x0F4
#define VIOLET      0xF0F
#define BROWN       0xB22
#define PINK        0xF9E
#define WHITE       0xFFF
#define BLACK       0x000
#define GREY        0x777
#endif  //_8_BIT_COLOR


//*************************************************************
//			        ПРОТОТИПЫ ФУНКЦИЙ
//*************************************************************
void Send_spi(unsigned char data);
void Send_to_lcd (unsigned char RS, unsigned char data);

void LCD_init (void);																				// Инициализация дисплея
void SetRotation (unsigned int angle);											// Задание угла поворота экрана
void SetArea (char x1, char x2, char y1, char y2);					// Рабочая функция выделения области экрана
void Put_Pixel (char x, char y, unsigned int color);				// Функция вывода пикселя. x и y – координаты экрана, где будет отображён пиксель цветом color

/*==============================================================================================================================
 Функция вывода одного символа ASCII-кода. Данная функция рассчитана на вывод символов размером 5х8 пикселей 
 symbol – выводимый на экран символ в ASCII-кодировке; x и y – начальная координата вывода символа; t_color – цвет пикселя; 
 b_color – цвет фона; переменные zoom_width и zoom_height увеличивают символ на экране в указанное число раз
==============================================================================================================================*/  
void LCD_Putchar (char symbol, char x, char y, int t_color, int b_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Функция вывода строки. x и y - координаты пикселя начала вывода строки
==============================================================================================================================*/    
void LCD_Puts(const char *str, int x, int y, int t_color, int b_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 То же, что и LCD_Putchar, только без цвета фона
==============================================================================================================================*/  
void LCD_Putchar_Shadow (char symbol, char x, char y, int t_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 То же, что и LCD_Puts, только без цвета фона
==============================================================================================================================*/
void LCD_Puts_Shadow (const char *str, int x, int y,  int t_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Функция заливки экрана цветом color
==============================================================================================================================*/ 
void LCD_FillScreen (unsigned int color);

/*==============================================================================================================================
 Функция вывода картинки. x и y начальная позиция выводимого на экран изображения; width и height – ширина и высота изображения
 (в пикселях);  *img – указатель на массив данных, составляющих изображение. Данная функция предполагает, что массив данных
 изображения расположен в памяти микроконтроллера. Для преобразования необходимого вам изображения в массив, содержащий
 цвет пикселей, можно воспользоваться программами Image2Lcd или Nokia Image Creator, которые несложно найти на просторах 
 интернета. Единственное требование – направление вывода массива изображения должно выполняться слева-направо, сверху-вниз! 
 При использовании 16-ти битной палитры, при преобразовании изображения в массив типа char, обязательно старший байт должен 
 идти первым!
==============================================================================================================================*/
void LCD_Output_image (char x, char y, char width, char height, const char *img);

/*==============================================================================================================================
 Рабочая функция для LCD_Output_image
==============================================================================================================================*/
void Send_Image (char x, char y, char width, char height, const char *img);

#ifdef _GEOMETRICAL

/*==============================================================================================================================
 Нарисовать линию. x1 и y1 – начальная позиция линии; x2 и y2 – конечная позиция линии
==============================================================================================================================*/
void LCD_DrawLine (char x1, char y1, char x2, char y2, int color);

/*==============================================================================================================================
 Нарисовать линию шириной width 
==============================================================================================================================*/
void LCD_FillLine (char tx1, char ty1, char tx2, char ty2, char width, int color);

/*==============================================================================================================================
 Нарисовать рамку. size - толщина рамки
==============================================================================================================================*/
void LCD_DrawRect (char x1, char y1, char width, char height, char size, int color);

/*==============================================================================================================================
 Нарисовать прямоугольник
==============================================================================================================================*/
void LCD_FillRect (char x1, char y1, char width, char height, int color);

/*==============================================================================================================================
 Нарисовать окружность. rad – радиус окружности в пикселях
==============================================================================================================================*/
void LCD_DrawCircle (char xcenter, char ycenter, char rad, int color);

/*==============================================================================================================================
 Нарисовать круг, заполненный цветом color
==============================================================================================================================*/
void LCD_FillCircle (char xcenter, char ycenter, char rad, int color);

/*==============================================================================================================================
 Нарисовать контуры треугольника
==============================================================================================================================*/
void LCD_DrawTriangle (char x1, char y1, char x2, char y2, char x3, char y3, int color);

/*==============================================================================================================================
 Нарисовать треугольник, заполненный цветом color
==============================================================================================================================*/
void LCD_FillTriangle (char x1, char y1, char x2, char y2, char x3, char y3, int color);

/*==============================================================================================================================
 Рабочая функция для LCD_FillTriangle
==============================================================================================================================*/
void LCD_FillTriangleA (char x1, char y1, char x2, char y2, char x3, char y3, int color);

void LCD_ON(void);
void LCD_OFF(void);

#endif //_GEOMETRICAL


#endif // __LPH87313C_h
